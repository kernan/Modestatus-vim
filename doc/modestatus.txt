*modestatus.txt* A "vanilla" statusline for Vim.
*modestatus* *Modestatus*

===============================================================================
CONTENTS                                                    *modestatus-contents*

1.  Intro......................................................|modestatus-intro|
2.  Settings................................................|modestatus-settings|
3.  Util........................................................|modestatus-util|
4.  Log..........................................................|modestatus-log|
5.  Highlight..............................................|modestatus-highlight|
6.  Parts......................................................|modestatus-parts|
7.  Options..................................................|modestatus-options|
8.  Colors....................................................|modestatus-colors|
9.  Extensions............................................|modestatus-extensions|
10. Extension: Core..................................|modestatus-extensions-core|
11. Extension: LocList............................|modestatus-extensions-loclist|
12. Examples................................................|modestatus-examples|

===============================================================================
INTRO                                                          *modestatus-intro*

Modestatus is (yet another) statusline replacement aimed at users who prefer
an easy to configure, minimalist vim statusline.

===============================================================================
SETTINGS                                                    *modestatus-settings*

Overview:~
  |modestatus_loaded|.........................................Disable the plugin.
  |modestatus#statusline|.......................................Statusline parts.

-------------------------------------------------------------------------------
Description:~

                                                          *'g:modestatus_loaded'*
g:modestatus_loaded
  Use this to disable the plugin: >
    let g:modestatus_loaded = 1
<
                                                      *'g:modestatus#statusline'*
g:modestatus#statusline
  Statusline dictionary representation. This is a list of |modestatus#parts|.

  default: >
    let g:modestatus#statusline.active = {
    \ 'active': {
    \   'left': [
    \     'mode',
    \     'paste',
    \     'filename',
    \     'modified',
    \     'readonly',
    \     'filetype',
    \     'encoding',
    \     'fileformat',
    \   ],
    \   'right': [
    \     'position',
    \     'line_percent'
    \   ],
    \ },
    \ 'inactive': {
    \   'left': [
    \     'filename',
    \     'modified',
    \     'readonly',
    \     'filetype',
    \     'encoding',
    \     'fileformat'
    \   ],
    \   'right': []
    \ }}
<
===============================================================================
UTIL                                                            *modestatus-util*

Overview:~
  |modestatus#util#check_defined|...................Check and default a variable.
  |modestatus#util#pad_before|................................Add prefix padding.
  |modestatus#util#pad_after|.................................Add suffix padding.
  |modestatus#util#prefix|..........................................Add a prefix.
  |modestatus#util#suffix|..........................................Add a posfix.

-------------------------------------------------------------------------------
Description:~

                                                  *modestatus#util#check_defined*
modestatus#util#check_defined({var}, {default})
  Check if {var} is defined and set it to {default} if not.

                                                     *modestatus#util#pad_before*
modestatus#util#pad_before({str}, {amt}[, {pad}])
  Prefix {str} with {amt} of {pad}. {pad} defaults to space. If {str} has
  length zero returns empty string.

                                                      *modestatus#util#pad_after*
modestatus#util#pad_after({str}, {amt}[, {pad}])
  Suffix {str} with {amt} of {pad}. {pad} defaults to space. If {str} has
  length zero returns empty strig.

                                                         *modestatus#util#prefix*
modestatus#util#prefix({str}, {pre})
  Prefix {str} with {pre}. If {str} has length zero returns empty string.

                                                         *modestatus#util#suffix*
modestatus#util#suffix({str}, {post})
  Suffix {str} with {post}. If {str} has length zero returns empty string.

===============================================================================
LOG                                                              *modestatus-log*

Overview:~
  |modestatus#log#error|....................................Log an error message.
  |modestatus#log#warning|.................................Log a warning message.

-------------------------------------------------------------------------------
Description:~

                                                           *modestatus#log#error*
modestatus#log#error({msg})
  Log a modestatus error {msg}.

                                                         *modestatus#log#warning*
modestatus#log#warning({msg})
  Log a modestatus warning {msg}.

===============================================================================
HIGHLIGHT                                                 *modestatus-hightlight*

Overview:~
  |modestatus#highlight#copy|..........................Deep copy highlight group.
  |modestatus#highlight#mod|..............................Modify highlight group.
  |modestatus#highlight#copymod|.................Copy and modify highlight group.

-------------------------------------------------------------------------------
Description:~

                                                      *modestatus#highlight#copy*
modestatus#highlight#copy({to}, {from})
  Deep copy a highlight group {from} to a group {to}.

                                                       *modestatus#highlight#mod*
modestatus#highlight#mod({grp}, {keys})
  Modify an existing highlight group {grp} with {keys} changed.

  keys: >
    {'term': ..., 'start': ..., 'stop': ...,
     'cterm': ..., 'ctermfg': ..., 'ctermbg': ...,
     'gui': ..., 'font': ..., 'guifg': ..., 'guibg': ..., 'guisp': ...}
<
                                                   *modestatus#highlight#copymod*
modestatus#highlight#copymod({to}, {from},{keys})
  Copy an existing highlight group {from} to a group {to} with {keys} changed.

  keys: >
    {'term': ..., 'start': ..., 'stop': ...,
     'cterm': ..., 'ctermfg': ..., 'ctermbg': ...,
     'gui': ..., 'font': ..., 'guifg': ..., 'guibg': ..., 'guisp': ...}
<
===============================================================================
PARTS                                                          *modestatus-parts*

Overview:~
  |modestatus#parts|.......................................................Parts.
  |modestatus#parts#add|..............................................Add a part.
  |modestatus#parts#has|....................................Check if part exists.
  |modestatus#parts#get|..............................................Get a part.
  |modestatus#parts#list|.........................................List all parts.

-------------------------------------------------------------------------------
Description:~

                                                               *modestatus#parts*
Statusline parts are stored in the form: >
  {{key}: {func}}
<
Where:
  {key} is the part name
  {func} is the name of the function that creates the part contents

                                                           *modestatus#parts#add*
modestatus#parts#add({key}, {func})
  Add a new statusline part referenced by {key} with content function {func}.

                                                           *modestatus#parts#has*
modestatus#parts#has({key})
  Check if a part {key} exists.

                                                           *modestatus#parts#get*
modestatus#parts#get({key})
  Get the name of the function that creates the content of the part {key}.

                                                          *modestatus#parts#list*
modestatus#parts#list()
  Echo a list of all the existing  parts.

===============================================================================
OPTIONS                                                      *modestatus-options*

Overview:~
  |modestatus#options|...................................................Options.
  |modestatus#options#add|...........................................Add options.
  |modestatus#options#has|................................Check if options exist.
  |modestatus#options#get|...........................................Get options.
  |modestatus#options#list|.....................................List all options.

-------------------------------------------------------------------------------
Description:~

                                                             *modestatus#options*
Each part can have a set of options of the form: >
  {{key}, {'active': {{opts}}, 'inactive': {{opts}}}}
<
Where:
  {key} is the name of a part
  {opt} is a dictionary of valid options

Valid options:
  'color':  a |modestatus#colors| name
  'format': a printf format string
  'separator': a string separator

                                                         *modestatus#options#add*
modestatus#options#add({key}, {val})
  Add options to a statusline part {key} with content {val}.

                                                         *modestatus#options#has*
modestatus#options#has({key})
  Check if options exist for statusline part {key}.

                                                         *modestatus#options#get*
modestatus#options#get({key})
  Get the options for a statusline part {key}.

                                                        *modestatus#options#list*
modestatus#options#list()
  Echo a list of all existing options.

===============================================================================
COLORS                                                        *modestatus-colors*

Overview:~
  |modestatus#colors|.....................................................Colors.
  |modestatus#colors#add|............................................Add a color.
  |modestatus#colors#has|..................................Check if color exists.
  |modestatus#colors#get|............................................Get a color.
  |modestatus#colors#list|.......................................List all colors.

-------------------------------------------------------------------------------
Description:~

                                                              *modestatus#colors*
Colors refer to vim User# colors and have the form: >
  {{key}: {idx}}
<
Where:
  {key} is the name of a color
  {idx} is an index [1,9] of the User# highlight group

                                                          *modestatus#colors#add*
modestatus#colors#add({key}, {val})
  Add a new color referenced by {key} refering to a User# highlight group
  with index {val}.

                                                          *modestatus#colors#has*
modestatus#colors#has({key})
  Check if a color {key} exists.

                                                          *modestatus#colors#get*
modestatus#colors#get({key})
  Get the index of the User# highlight group the color {key} refers to.

                                                         *modestatus#colors#list*
modestatus#colors#list()
  Echo a list of all the existing colors.

===============================================================================
EXTENSIONS                                                *modestatus-extensions*

Overview:~
  |modestatus#extensions|.............................................Extensions.
  |modestatus#extensions#auto|..............................Auto load extensions.
  |modestatus#extensions#enable|.............................Enable an extension.
  |modestatus#extensions#enable_all|.......................Enable all extensions.
  |modestatus#extensions#list|...............................List all extensions.

-------------------------------------------------------------------------------
Description:~

                                                          *modestatus#extensions*
Extensions define a set of parts that can be used to build the statusline.
They need to be enabled manually unless |g:modestatus#extensions#auto| is set.

All extensions should define a function modestatus#extensions#{name}#init that
contains all extension initialization.

                                                 *'g:modestatus#extensions#auto'*
g:modestatus#extensions#auto
  Set to let modestatus automatically enable all extensions.

  default: >
    let g:modestatus#extensions#auto = 0
<
                                                   *modestatus#extensions#enable*
modestatus#extensions#enable({ext})
  Enable an extension with the given name {ext}.

                                               *modestatus#extensions#enable_all*
modestatus#extensions#enable_all()
  Enable all extensions in '${rtp}/autoload/modestatus/extensions/'.

                                                     *modestatus#extensions#list*
modestatus#extensions#list()
  Echo a list of all enabled extensions.

===============================================================================
EXTENSION - CORE                                     *modestatus-extensions-core*

Overview:~
  |modestatus#extensions#core|....................................Core extension.
  |modestatus#extensions#core#parts|............................Statusline parts.
  |modestatus#extensions#core#symbols|...............................Symbols map.
  |modestatus#extensions#core#filename_override|.......Override filename by name.
  |modestatus#extensions#core#filetype_override|.......Override filename by type.

-------------------------------------------------------------------------------
Description:~

                                                     *modestatus#extensions#core*
Defined a set of basic statusline parts.
see: |modestatus#extensions#core#parts|

                                               *modestatus#extensions#core#parts*
Parts: >
  'line_percent'
  'position'
  'filename'
  'filetype'
  'encoding'
  'fileformat'
  'modified'
  'readonly'
  'paste'
<
                                         *'g:modestatus#extensions#core#symbols'*
Symbols used by the part generator functions.

default: >
  let g:modestatus#core#extensions#symbols = {
    \   'modes': {
    \     'n':      'N',
    \     'i':      'I',
    \     'R':      'R',
    \     'v':      'V',
    \     'V':      'V',
    \     "\<c-v>": 'V',
    \     'c':      'C',
    \     's':      'S',
    \     'S':      'S',
    \     "\<c-s>": 'S',
    \     '?':      '?'
    \   },
    \   'modified': '+',
    \   'readonly': '‼',
    \   'paste': 'P'
    \ }
<
                               *'g:modestatus#extensions#core#filename_override'*
Dictionary of displayed filename overrides.

example: >
  let g:modestatus#extensions#core#filename_override = {
    \   '__Gundo__': 'Undo Tree',
    \   '__Gundo_Preview__': 'Undo Preview'
    \ }
<
                               *'g:modestatus#extensions#core#filetype_override'*
Dictionary of display filname filetype overrides.

example: >
  let g:modestatus#extensions#core#filetype_override = {
    \   'qf': 'Quick Fix'
    \ }
<
===============================================================================
EXTENSION - LOCLIST                               *modestatus-extensions-loclist*

Overview:~
  |modestatus#extensions#loclist|..............................LocList extension.
  |modestatus#extensions#loclist#parts|.........................Statusline parts.

-------------------------------------------------------------------------------
Description:~

                                                  *modestatus#extensions#loclist*
Defines statusline parts for creating error lines from location list entries.
see: |modestatus#extensions#loclist#parts|

                                            *modestatus#extensions#loclist#parts*
Parts: >
  'loclist_errors'   => 'E {num}'
  'loclist_warnings' => 'W {num}'
<
===============================================================================
EXAMPLES                                                    *modestatus-examples*

example: >
  call modestatus#extensions#enable('core')

  let g:modestatus#statusline = {
    \ 'active': {
    \   'left': [
    \     'mode',
    \     'filename',
    \     'modified',
    \     'readonly',
    \     'filetype',
    \     'encoding',
    \     'fileformat'
    \   ],
    \   'right': [
    \     'position',
    \     'line_percent'
    \   ]
    \ },
    \ 'inactive': {
    \   'left': [
    \     'filename',
    \     'modified',
    \     'readonly',
    \     'filetype'
    \   ],
    \   'right': []
    \ }
    \}

  call modestatus#highlight#copymod('Statusline', 'User1', {
    \ 'term': 'bold', 'cterm': 'bold', 'gui': 'bold'})
  call modestatus#colors#add('bold', 1)

  call modestatus#highlight#copymod('Statusline', 'User2', {
    \ 'term': 'bold', 'cterm': 'bold', 'ctermfg': 'Red',
    \ 'gui': 'bold', 'guifg': 'Red'})
  call modestatus#colors#add('redbold', 2)

  call modestatus#options#add('filename', {
    \ 'active': {'color': 'bold'}})
  call modestatus#options#add('modified', {
    \ 'active': {'color': 'redbold'})
  call modestatus#options#add('readonly', {
    \ 'active': {'color': 'redbold'})
  call modestatus#options#add('filetype', {
    \ 'active': {'format': '[%s]',
    \ 'inactive': {'format': '[%s]'}})
  call modestatus#options#add('encoding', {
    \ 'active': {'format': '[%s', 'separator': ':'}})
  call modestatus#options#add('fileformat': {
    \ 'active': {'format': '%s]'}})
<
===============================================================================
vim:tw=78:sw=2:ts=8:norl:noet:ft=help
